/* Logo.java */
/* Generated By:JavaCC: Do not edit this line. Logo.java */
import java.lang.*;
import java.io.*;
import java.util.*;

public class Logo implements LogoConstants {
    static private File javaFile, htmlFile;   // output files
    static private PrintWriter pw;            // printwriter used for every output
    static private int numIndent = 0;         // size of indentation
    static private Stack<Integer> repStack = new Stack<Integer>();
    static private Hashtable<String, Double> variables = new Hashtable<String, Double>();
    static private Hashtable<String, ArrayList<String>> subroutineParameters = new Hashtable<String, ArrayList<String>>();
    // to pretty-print the translation
    // uses numIndent and pw defined as static variables in LogoParser
    // writes in pw the numIndent times the indent string
    public static void indent() {
      for (int i=0; i<numIndent; i++) { pw.print("   "); }
    }

    // Main method that reads the source file ".logo" and translates it
    // into two files: ".java" ".html"
    public static void main(String args[]) throws ParseException,
                                                  TokenMgrError,
                                                  IOException
    {
      // reads the source file ".logo" (first argument of command line)
      BufferedReader in = new BufferedReader(new FileReader(args[0]));
      Logo parser = new Logo(in);
      try {
        parser.start();
        System.out.println("DONE");
      }
      catch (ParseException x) { System.out.println("Syntaxtic Error"); throw x; }
      catch (TokenMgrError x)  { System.out.println("Lexical Error"); throw x; }
    }
    private static String toString(double d)
    {
        return ""+d;
    }
    private static String paramImpl(ArrayList<Double> d)
    {
        if(d.size() == 0) return "";
        String s = "";
        for(double v : d)
        {
            s+=v+",";
        }
        return s.substring(0,s.length()-1);
    }
    private static String paramDef(ArrayList<String> s)
    {
        if(s.size() == 0) return "";
        String o = "double ";
        for(String v : s)
        {
            o+=v+",double ";
        }
        return o.substring(0,o.length()-8);
    }

// eigene Tokens
  static final public 
void start() throws ParseException, IOException {Token t;
    jj_consume_token(LOGO);
    t = jj_consume_token(IDENTIFIER);
// Create the HTML file for the applet
        htmlFile = new File(t.image.toLowerCase() + ".html");
        pw = new PrintWriter(new FileOutputStream(htmlFile));
        pw.println("<html>");
        pw.println("  <body>");
        pw.println("  <applet code='" + t.image.toLowerCase() +
                   ".class'width=600 height=600></applet>");
        pw.println("  </html>");
        pw.println("</body>");
        pw.close();
        //Create the Java file and the class
        javaFile = new File(t.image.toLowerCase() + ".java");
        pw = new PrintWriter(new FileOutputStream(javaFile));
        pw.println("import java.awt.Graphics;\n");
        pw.println("public class " + t.image.toLowerCase() +
                   " extends java.applet.Applet {\n" );
        numIndent++;
        indent();
        pw.println("private LogoPrimitives logo;\n");
        pw.flush();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SUBROUTINE:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      subroutine();
    }
indent(); numIndent++;
        pw.println("public void paint(Graphics g) {");
        indent();
        pw.println("logo = new LogoPrimitives(this);");
        pw.println();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLEARSCREEN:
      case PENDOWN:
      case PENUP:
      case FORWARD:
      case BACKWARD:
      case LEFTTURN:
      case RIGHTTURN:
      case HIDETURTLE:
      case SHOWTURTLE:
      case WAIT:
      case REPEAT:
      case IF:
      case IFELSE:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      statement();
    }
numIndent--;
        indent();
        pw.println("}");
    jj_consume_token(END);
numIndent--; indent();
      pw.println("}");
       pw.flush(); pw.close();
  }

// ADD THE REST OF THE JAVACC RULES WITH THE JAVA CODE
  static final public 
void subroutine() throws ParseException, IOException {Token t;String methodName; ArrayList<String> paramNames = new ArrayList<String>();
    jj_consume_token(SUBROUTINE);
    t = jj_consume_token(IDENTIFIER);
methodName = t.image;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PARAMETER:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      t = jj_consume_token(PARAMETER);
paramNames.add(t.image.substring(1).toLowerCase());
    }
indent();
        numIndent++;
        pw.println("private void "+methodName+"("+paramDef(paramNames)+"){");
        subroutineParameters.put(methodName, new ArrayList<String>());
        for(int index = 0; index < paramNames.size();index++)
        {
            variables.put(paramNames.get(index),0.0);
            subroutineParameters.get(methodName).add(paramNames.get(index).toLowerCase());
            indent();
        }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLEARSCREEN:
      case PENDOWN:
      case PENUP:
      case FORWARD:
      case BACKWARD:
      case LEFTTURN:
      case RIGHTTURN:
      case HIDETURTLE:
      case SHOWTURTLE:
      case WAIT:
      case REPEAT:
      case IF:
      case IFELSE:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      statement();
    }
    jj_consume_token(END);
numIndent--;
        indent();
        pw.println("}");
  }

  static final public void statement() throws ParseException, IOException {Token t; String id = ""; String number; ArrayList<String> params = new ArrayList<String>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CLEARSCREEN:{
      jj_consume_token(CLEARSCREEN);
indent();
        pw.println("logo.cs();");
      break;
      }
    case PENDOWN:{
      jj_consume_token(PENDOWN);
indent();
        pw.println("logo.pd();");
      break;
      }
    case PENUP:{
      jj_consume_token(PENUP);
indent();
        pw.println("logo.pu();");
      break;
      }
    case HIDETURTLE:{
      jj_consume_token(HIDETURTLE);
indent();
        pw.println("logo.ht();");
      break;
      }
    case SHOWTURTLE:{
      jj_consume_token(SHOWTURTLE);
indent();
        pw.println("logo.st();");
      break;
      }
    case FORWARD:{
      jj_consume_token(FORWARD);
      number = nExpr();
indent();
        pw.println("logo.fd(" + number + ");");
      break;
      }
    case BACKWARD:{
      jj_consume_token(BACKWARD);
      number = nExpr();
indent();
        pw.println("logo.bk(" + number + ");");
      break;
      }
    case LEFTTURN:{
      jj_consume_token(LEFTTURN);
      number = nExpr();
indent();
        pw.println("logo.lt(" + number + ");");
      break;
      }
    case RIGHTTURN:{
      jj_consume_token(RIGHTTURN);
      number = nExpr();
indent();
        pw.println("logo.rt(" + number + ");");
      break;
      }
    case WAIT:{
      jj_consume_token(WAIT);
      number = nExpr();
indent();
        pw.println("logo.wait(" + number + ");");
      break;
      }
    case REPEAT:{
      repeat();
      break;
      }
    case IF:{
      ifStatement();
      break;
      }
    case IFELSE:{
      ifElseStatement();
      break;
      }
    case IDENTIFIER:{
      t = jj_consume_token(IDENTIFIER);
id = t.image+"(";
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SUB:
        case LPAR:
        case REPCOUNT:
        case NUM:
        case PARAMETER:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_5;
        }
        number = nExpr();
id+=number+",";
      }
indent();
        pw.println(id.substring(0,id.length()-1)+");");
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void repeat() throws ParseException, IOException {String iterations; Token t;
    jj_consume_token(REPEAT);
    iterations = nExpr();
    jj_consume_token(LBRA);
indent();
        numIndent++;
        pw.println("for(int i"+numIndent+" = 0;i"+numIndent+"<"+iterations+";i"+numIndent+"++){");
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLEARSCREEN:
      case PENDOWN:
      case PENUP:
      case FORWARD:
      case BACKWARD:
      case LEFTTURN:
      case RIGHTTURN:
      case HIDETURTLE:
      case SHOWTURTLE:
      case WAIT:
      case REPEAT:
      case IF:
      case IFELSE:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      statement();
    }
    jj_consume_token(RBRA);
numIndent--;
        indent();
        pw.println("}");
  }

  static final public void ifStatement() throws ParseException, IOException {Token t; String condition;
    jj_consume_token(IF);
    condition = bExpr();
    jj_consume_token(LBRA);
indent();
        numIndent++;
        pw.println("if("+condition+"){");
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLEARSCREEN:
      case PENDOWN:
      case PENUP:
      case FORWARD:
      case BACKWARD:
      case LEFTTURN:
      case RIGHTTURN:
      case HIDETURTLE:
      case SHOWTURTLE:
      case WAIT:
      case REPEAT:
      case IF:
      case IFELSE:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_7;
      }
      statement();
    }
    jj_consume_token(RBRA);
indent();
        numIndent--;
        pw.println("}");
  }

  static final public void ifElseStatement() throws ParseException, IOException {String condition;
    jj_consume_token(IFELSE);
    condition = bExpr();
    jj_consume_token(LBRA);
indent();
        numIndent++;
        pw.println("if("+condition+"){");
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLEARSCREEN:
      case PENDOWN:
      case PENUP:
      case FORWARD:
      case BACKWARD:
      case LEFTTURN:
      case RIGHTTURN:
      case HIDETURTLE:
      case SHOWTURTLE:
      case WAIT:
      case REPEAT:
      case IF:
      case IFELSE:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_8;
      }
      statement();
    }
    jj_consume_token(RBRA);
numIndent--;
        indent();
        pw.println("} else {");
        numIndent++;
    jj_consume_token(LBRA);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLEARSCREEN:
      case PENDOWN:
      case PENUP:
      case FORWARD:
      case BACKWARD:
      case LEFTTURN:
      case RIGHTTURN:
      case HIDETURTLE:
      case SHOWTURTLE:
      case WAIT:
      case REPEAT:
      case IF:
      case IFELSE:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_9;
      }
      statement();
    }
    jj_consume_token(RBRA);
pw.println("}");
        indent();
        numIndent--;
  }

  static final public String nExpr() throws ParseException, IOException {String x; String y;
    x = nTerm();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADD:
      case SUB:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADD:{
        jj_consume_token(ADD);
        y = nTerm();
x+="+"+y;
        break;
        }
      case SUB:{
        jj_consume_token(SUB);
        y = nTerm();
x+="-"+y;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return x;}
    throw new Error("Missing return statement in function");
  }

  static final public String nTerm() throws ParseException, IOException {String x; String y;
    x = nFactor();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:
      case DIV:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:{
        jj_consume_token(MUL);
        y = nFactor();
x +="*"+ y;
        break;
        }
      case DIV:{
        jj_consume_token(DIV);
        y = nFactor();
x +="/"+ y;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return x;}
    throw new Error("Missing return statement in function");
  }

  static final public String nFactor() throws ParseException, IOException {Token t; String value;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SUB:{
      jj_consume_token(SUB);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        value = number();
        break;
        }
      case REPCOUNT:{
        t = jj_consume_token(REPCOUNT);
value = "i"+numIndent;
        break;
        }
      case PARAMETER:{
        t = jj_consume_token(PARAMETER);
value = t.image.substring(1).toLowerCase();
        break;
        }
      case LPAR:{
        jj_consume_token(LPAR);
        value = nExpr();
        jj_consume_token(RPAR);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return "-("+value+")";}
      break;
      }
    case NUM:{
      value = number();
{if ("" != null) return value;}
      break;
      }
    case REPCOUNT:{
      t = jj_consume_token(REPCOUNT);
{if ("" != null) return "i"+numIndent;}
      break;
      }
    case PARAMETER:{
      t = jj_consume_token(PARAMETER);
{if ("" != null) return t.image.substring(1).toLowerCase();}
      break;
      }
    case LPAR:{
      jj_consume_token(LPAR);
      value = nExpr();
      jj_consume_token(RPAR);
{if ("" != null) return value;}
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String number() throws ParseException, IOException {Token t; String value;
    t = jj_consume_token(NUM);
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
  }

  static final public String bExpr() throws ParseException, IOException {Token t; String value;String result = "";
    value = bTerm();
result += value;
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_12;
      }
      jj_consume_token(OR);
      value = bTerm();
result += "||"+value;
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public String bTerm() throws ParseException, IOException {Token t; String value;String result = "";
    value = bFactor();
result += value;
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_13;
      }
      jj_consume_token(OR);
      value = bFactor();
result += "&&"+value;
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public String bFactor() throws ParseException, IOException {Token t; String value;String result = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:{
      t = jj_consume_token(TRUE);
{if ("" != null) return "true";}
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
{if ("" != null) return "false";}
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      jj_consume_token(LPAR);
      value = bExpr();
      jj_consume_token(RPAR);
{if ("" != null) return "!("+value+")";}
      break;
      }
    case SUB:
    case LPAR:
    case REPCOUNT:
    case NUM:
    case PARAMETER:{
      value = nExpr();
result += value;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:{
        jj_consume_token(EQ);
result += "==";
        break;
        }
      case NE:{
        jj_consume_token(NE);
result +="!=";
        break;
        }
      case LT:{
        jj_consume_token(LT);
result += "<";
        break;
        }
      case GT:{
        jj_consume_token(GT);
result += ">";
        break;
        }
      case LE:{
        jj_consume_token(LE);
result += "<=";
        break;
        }
      case GE:{
        jj_consume_token(GE);
result += ">=";
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      value = nExpr();
result += value;
{if ("" != null) return result;}
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LogoTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0xff000000,0x0,0xff000000,0x800090,0xff000000,0xff000000,0xff000000,0xff000000,0xff000000,0x18,0x18,0x60,0x60,0x800080,0x800090,0x80000,0x80000,0x3f000,0xf00090,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x20,0x81f,0x1000,0x81f,0x1400,0x81f,0x81f,0x81f,0x81f,0x81f,0x0,0x0,0x0,0x0,0x1400,0x1400,0x0,0x0,0x0,0x1400,};
   }

  /** Constructor with InputStream. */
  public Logo(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Logo(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LogoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Logo(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LogoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new LogoTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Logo(LogoTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LogoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[45];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
